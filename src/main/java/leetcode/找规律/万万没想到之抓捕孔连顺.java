package leetcode.找规律;

import org.junit.Test;

/**
 * @description:
 * @author: 范子祺
 * <p>
 * 我叫王大锤，是一名特工。我刚刚接到任务：在字节跳动大街进行埋伏，抓捕恐怖分子孔连顺。和我一起行动的还有另外两名特工，我提议
 * <p>
 * 1. 我们在字节跳动大街的N个建筑中选定3个埋伏地点。
 * 2. 为了相互照应，我们决定相距最远的两名特工间的距离不超过D。
 * <p>
 * 我特喵是个天才! 经过精密的计算，我们从X种可行的埋伏方案中选择了一种。这个方案万无一失，颤抖吧，孔连顺！
 * ……
 * 万万没想到，计划还是失败了，孔连顺化妆成小龙女，混在cosplay的队伍中逃出了字节跳动大街。只怪他的伪装太成功了，就是杨过本人来了也发现不了的！
 * <p>
 * 请听题：给定N（可选作为埋伏点的建筑物数）、D（相距最远的两名特工间的距离的最大值）以及可选建筑的坐标，计算在这次行动中，大锤的小队有多少种埋伏选择。
 * 注意：
 * 1. 两个特工不能埋伏在同一地点
 * 2. 三个特工是等价的：即同样的位置组合(A, B, C) 只算一种埋伏方法，不能因“特工之间互换位置”而重复使用
 * 输入描述:
 * 第一行包含空格分隔的两个数字 N和D(1 ≤ N ≤ 1000000; 1 ≤ D ≤ 1000000)
 * <p>
 * 第二行包含N个建筑物的的位置，每个位置用一个整数（取值区间为[0, 1000000]）表示，从小到大排列（将字节跳动大街看做一条数轴）
 * <p>
 * 输出描述:
 * 一个数字，表示不同埋伏方案的数量。结果可能溢出，请对 99997867 取模
 * <p>
 * 输入例子1:
 * 4 3
 * 1 2 3 4
 * <p>
 * 输出例子1:
 * 4
 * <p>
 * 例子说明1:
 * 可选方案 (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)
 * <p>
 * 输入例子2:
 * 5 19
 * 1 10 20 30 50
 * <p>
 * 输出例子2:
 * 1
 * <p>
 * 例子说明2:
 * 可选方案 (1, 10, 20)
 * <p>
 * 这题其实是从给定的点中选三个点，最远距离不超过D则为一种，将所有的点遍历取道一次
 **/
public class 万万没想到之抓捕孔连顺 {

    /**
     * @param building 可选点
     * @param n        n指的可选点有多少个
     * @param d        这个指的最大距离
     * @return
     */
    private static int allWay(int[] building, int n, int d) {
        long count = 0;
        if (n < 3) return 0;
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                if (building[j] - building[i] > d) {
                    break;
                }
                for (int v = j + 1; v < n; v++) {
                    if (building[v] - building[i] > d) {
                        break;
                    }
                    count++;
                    System.out.println("当前方案" + building[i] + "," + building[j] + "," + building[v]);
                }
            }
        }
        return (int) (count % 99997867);
    }

    @Test
    public void test() {
//        int[] i = {1,2,3,4};
        int[] i2 = {1, 10, 20, 30, 50};
        System.out.println(allWay(i2, 5, 19));
    }
//---------------------
//    作者：alwaysBrother
//    来源：CSDN
//    原文：https://blog.csdn.net/u013041642/article/details/94598218
//    版权声明：本文为博主原创文章，转载请附上博文链接！

}
